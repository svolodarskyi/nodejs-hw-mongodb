{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Contacts app",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of contacts app"
  },
  "servers": [
    {
      "url": "http://127.0.0.1:3000"
    },
    {
      "url": "https://hw7-swagger-37a3.onrender.com"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Auth operations."
    },
    {
      "name": "Contacts",
      "description": "Operations about contacts."
    }
  ],
  "paths": {
    "/contacts": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get a list of contacts",
        "operationId": "getContacts",
        "description": "Retrieve a list of contacts with optional filtering.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/perPage"
          },
          {
            "$ref": "#/components/parameters/sortBy"
          },
          {
            "$ref": "#/components/parameters/sortOrder"
          },
          {
            "$ref": "#/components/parameters/type"
          },
          {
            "$ref": "#/components/parameters/isFavourite"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create a new contact",
        "operationId": "createContact",
        "description": "This endpoint allows you to create a new contact.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "phoneNumber"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the contact",
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "description": "Email address of the contact",
                    "example": "john.doe@example.com"
                  },
                  "phoneNumber": {
                    "type": "string",
                    "description": "Phone number of the contact",
                    "example": "+123456789"
                  },
                  "isFavourite": {
                    "type": "boolean",
                    "description": "Indicates if the contact is marked as favourite",
                    "default": false
                  },
                  "contactType": {
                    "type": "string",
                    "enum": [
                      "work",
                      "home",
                      "personal"
                    ],
                    "description": "Type of contact",
                    "example": "work"
                  },
                  "photo": {
                    "type": "string",
                    "format": "binary",
                    "description": "Contact's photo (optional)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/contacts/{id}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "operationId": "getContactById",
        "summary": "Retrieve a contact's full information by its unique identifier.",
        "description": "This endpoint allows you to get a contact by its unique ID.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the contact to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the contact",
            "content": {
              "application/json": {
                "schema": {
                    "title": "Create Contact Response",
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "integer",
                        "example": 201
                      },
                      "message": {
                        "type": "string",
                        "example": "Contact created successfully"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string", "example": "507f1f77bcf86cd799439011" },
                          "name": { "type": "string", "example": "Jane Doe" },
                          "email": { "type": "string", "example": "jane.doe@example.com" },
                          "phoneNumber": { "type": "string", "example": "+987654321" },
                          "isFavourite": { "type": "boolean", "example": true },
                          "contactType": { "type": "string", "enum": ["work", "home", "personal"], "example": "personal" },
                          "photo": { "type": "string", "description": "URL or base64 of the photo", "example": "https://example.com/photo2.jpg" }
                        }
                      }
                    }
                  }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Contacts"
        ],
        "operationId": "updateContact",
        "summary": "Update contact information by ID",
        "description": "This endpoint allows you to update specific contact details by its unique ID.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the contact to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "johndoe@example.com"
                  },
                  "phoneNumber": {
                    "type": "string",
                    "example": "+1234567890"
                  },
                  "photo": {
                    "type": "string",
                    "format": "binary",
                    "description": "Contact's updated photo (optional)"
                  },
                  "contactType": {
                    "type": "string",
                    "enum": [
                      "work",
                      "home",
                      "personal"
                    ],
                    "example": "personal"
                  },
                  "isFavourite": {
                    "type": "boolean",
                    "description": "Indicates if the contact is marked as favourite",
                    "example": true
                  }
                }
              },
              "example": {
                "email": "tetetetete@gmail.com",
                "contactType": "home",
                "phoneNumber": "+123456789",
                "name": "Jane Doe",
                "photo": "file data",
                "isFavourite": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated contact details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "operationId": "deleteContactById",
        "summary": "Delete a contact by ID",
        "description": "Delete a contact by its unique ID.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the contact to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "summary": "Register a new user",
        "operationId": "registerUser",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password123"
                  },
                  "name": {
                    "type": "string",
                    "example": "Full Name"
                  }
                },
                "required": [
                  "email",
                  "password",
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponseSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Login a user",
        "operationId": "loginUser",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password123"
                  }
                },
                "required": [
                  "email",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "summary": "Refresh the access token",
        "operationId": "refreshToken",
        "tags": [
          "Auth"
        ],
        "parameters": [
          {
            "in": "cookie",
            "name": "refreshToken",
            "description": "The refresh token, which is passed through cookies, used to generate a new access token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New access token returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseSchema"
                },
                "example": {
                  "status": 200,
                  "message": "Successfully refreshed a session!",
                  "data": {
                    "accessToken": "kRvdeii1acPo2gCp06mMjNyDGyrw6pkd+OlOur8r"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request, e.g. missing or malformed refresh token cookie",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseSchema"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid refresh token",
                  "data": "Refresh token cookie is missing or malformed"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, e.g. invalid or expired refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseSchema"
                },
                "example": {
                  "status": 401,
                  "message": "Something went wrong",
                  "data": "Refresh token is invalid or expired"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "Log out the user",
        "operationId": "logoutUser",
        "tags": [
          "Auth"
        ],
        "parameters": [
          {
            "in": "cookie",
            "name": "refreshToken",
            "description": "The refresh token, passed through cookies, used to log out the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully logged out, no content returned"
          },
          "400": {
            "description": "Bad request, typically missing or invalid refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseSchema"
                },
                "example": {
                  "status": 400,
                  "message": "Invalid refresh token",
                  "data": "Refresh token cookie is missing or malformed"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, if no valid session exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseSchema"
                },
                "example": {
                  "status": 401,
                  "message": "Something went wrong",
                  "data": "Not authenticated"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/send-reset-email": {
      "post": {
        "summary": "Send password reset email",
        "operationId": "sendResetEmail",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "user@example.com"
                  }
                },
                "required": [
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset password email has been successfully sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Reset password email has been successfully sent."
                    },
                    "data": {
                      "type": "object",
                      "example": {}
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "description": "User with provided email was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseSchema"
                },
                "example": {
                  "status": 404,
                  "message": "Something went wrong",
                  "data": "User not found!"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/reset-pwd": {
      "post": {
        "summary": "Reset user password",
        "operationId": "resetUserPassword",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "JWT token received via email",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjBjNzJiMmY1ZjFiMmMwMDFjOGU4ZGUzZiIsImlhdCI6MTYyMjMwMjU3NywiZXhwIjoxNjIyMzA2MTM3fQ.PVg3zAYnN2vqkpJGbLJebHETK-3Z0dF3Vop5FOkxg_c"
                  },
                  "password": {
                    "type": "string",
                    "description": "New password to set",
                    "example": "17171717"
                  }
                },
                "required": [
                  "token",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password has been successfully reset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Password has been successfully reset."
                    },
                    "data": {
                      "type": "object",
                      "example": {}
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "description": "Invalid or expired token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseSchema"
                },
                "example": {
                  "status": 401,
                  "message": "Something went wrong",
                  "data": "Token is expired or invalid."
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "200": {
        "description": "Request was successful",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "message": {
                  "type": "string",
                  "example": "Successfully found contacts!"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "description": "The unique identifier of the contact",
                            "example": "67f25d39e1935b9687129f29"
                          },
                          "name": {
                            "type": "string",
                            "example": "John Doe"
                          },
                          "phoneNumber": {
                            "type": "string",
                            "example": "+123456789"
                          },
                          "email": {
                            "type": "string",
                            "example": "john.doe@example.com"
                          },
                          "isFavourite": {
                            "type": "boolean",
                            "example": false
                          },
                          "contactType": {
                            "type": "string",
                            "example": "work"
                          },
                          "userId": {
                            "type": "string",
                            "example": "67f22a41875fd7d41ec03fd3"
                          },
                          "photo": {
                            "type": "string",
                            "format": "binary",
                            "example": null
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2025-04-06T10:53:45.112Z"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2025-04-06T10:53:45.112Z"
                          }
                        }
                      }
                    },
                    "page": {
                      "type": "integer",
                      "example": 1
                    },
                    "perPage": {
                      "type": "integer",
                      "example": 10
                    },
                    "totalItems": {
                      "type": "integer",
                      "example": 4
                    },
                    "totalPages": {
                      "type": "integer",
                      "example": 1
                    },
                    "hasPreviousPage": {
                      "type": "boolean",
                      "example": false
                    },
                    "hasNextPage": {
                      "type": "boolean",
                      "example": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "201": {
        "description": "Resource created successfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 201
                },
                "message": {
                  "type": "string",
                  "example": "Successfully created a contact!"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "67f3cabf966746f5cc383df4"
                    },
                    "name": {
                      "type": "string",
                      "example": "John Doe"
                    },
                    "phoneNumber": {
                      "type": "string",
                      "example": "+1234567890"
                    },
                    "email": {
                      "type": "string",
                      "example": "john.doWWW@example.com"
                    },
                    "isFavourite": {
                      "type": "boolean",
                      "example": true
                    },
                    "contactType": {
                      "type": "string",
                      "enum": [
                        "work",
                        "home",
                        "personal"
                      ],
                      "example": "personal"
                    },
                    "userId": {
                      "type": "string",
                      "example": "67f22a41875fd7d41ec03fd3"
                    },
                    "photo": {
                      "type": "string",
                      "format": "uri",
                      "example": "https://res.cloudinary.com/dl22iuo55/image/upload/v1744030398/jy3u6b7thbwnfgt2n6jm.webp"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2025-04-07T12:53:19.153Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2025-04-07T12:53:19.153Z"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "204": {
        "description": "Resource deleted successfully. No content returned."
      },
      "400": {
        "description": "Invalid request or bad input",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "status": 400,
              "message": "Something went wrong",
              "data": "\"email\" is required, \"emai\" is not allowed"
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized access",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "status": 401,
              "message": "Not authenticated"
            }
          }
        }
      },
      "403": {
        "description": "Forbidden access",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 403
                },
                "message": {
                  "type": "string",
                  "example": "Forbidden"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            },
            "example": {
              "message": "Not found"
            }
          }
        }
      },
      "409": {
        "description": "Conflict - user already exists",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "status": 409,
              "message": "Something went wrong",
              "data": "Email in use"
            }
          }
        }
      },
      "500": {
        "description": "Internal server error. Something went wrong on the server.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong"
                },
                "data": {
                  "type": "string",
                  "example": "Error details"
                }
              }
            },
            "example": {
              "status": 500,
              "message": "Something went wrong",
              "data": "Error details"
            }
          }
        }
      },
      "Unauthorized": {
        "$ref": "#/components/responses/401"
      },
      "Forbidden": {
        "$ref": "#/components/responses/403"
      },
      "BadRequest": {
        "$ref": "#/components/responses/400"
      },
      "NotFound": {
        "$ref": "#/components/responses/404"
      }
    },
    "parameters": {
      "page": {
        "name": "page",
        "in": "query",
        "description": "Page number",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 1
        }
      },
      "perPage": {
        "name": "perPage",
        "in": "query",
        "description": "Number of items per page",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 10
        }
      },
      "sortBy": {
        "name": "sortBy",
        "in": "query",
        "description": "Sort field",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "name"
          ],
          "default": "name"
        }
      },
      "sortOrder": {
        "name": "sortOrder",
        "in": "query",
        "description": "Sort order",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ],
          "default": "asc"
        }
      },
      "type": {
        "name": "type",
        "in": "query",
        "description": "Contact type filter",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "work",
            "home",
            "personal"
          ]
        }
      },
      "isFavourite": {
        "name": "isFavourite",
        "in": "query",
        "description": "Filter by favourite status",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      }
    },
    "schemas": {
      "ErrorResponseSchema": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 401
          },
          "message": {
            "type": "string",
            "example": "Unauthorized"
          },
          "data": {
            "type": "string",
            "example": "\"email\" is required, \"emai\" is not allowed"
          }
        },
        "required": [
          "status",
          "message"
        ]
      },
      "Contact": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "67f25d39e1935b9687129f29"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "phoneNumber": {
            "type": "string",
            "example": "+123456789"
          },
          "isFavourite": {
            "type": "boolean",
            "example": false
          },
          "contactType": {
            "type": "string",
            "example": "work"
          },
          "userId": {
            "type": "string",
            "example": "67f22a41875fd7d41ec03fd3"
          },
          "photo": {
            "type": "string",
            "format": "binary",
            "example": null
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-06T10:53:45.112Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-06T10:53:45.112Z"
          }
        },
        "required": [
          "_id",
          "name",
          "email",
          "phoneNumber",
          "isFavourite",
          "contactType",
          "userId",
          "createdAt",
          "updatedAt"
        ]
      },
      "RegistrationResponseSchema": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 201
          },
          "message": {
            "type": "string",
            "example": "Successfully registered a user!"
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "67f39f29e3c363521e0ae31d"
              },
              "name": {
                "type": "string",
                "example": "Ful Name"
              },
              "email": {
                "type": "string",
                "example": "e-mail@example.com"
              }
            }
          }
        },
        "required": [
          "status",
          "message",
          "data"
        ]
      },
      "LoginResponseSchema": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "HTTP status code of the response",
            "example": 200
          },
          "message": {
            "type": "string",
            "description": "Message associated with the login response",
            "example": "Successfully logged in a user!"
          },
          "data": {
            "type": "object",
            "properties": {
              "accessToken": {
                "type": "string",
                "description": "JWT access token for the user",
                "example": "n1IiOgOQDeYgt0GHLY/8yJu3Bin3WZHcVT+J+jFB"
              }
            }
          }
        },
        "required": [
          "status",
          "message",
          "data"
        ]
      }
    }
  }
}
